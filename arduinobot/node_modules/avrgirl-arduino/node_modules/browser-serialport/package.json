{
  "_args": [
    [
      {
        "raw": "browser-serialport@git://github.com/noopkat/browser-serialport.git#api-updates",
        "scope": null,
        "escapedName": "browser-serialport",
        "name": "browser-serialport",
        "rawSpec": "git://github.com/noopkat/browser-serialport.git#api-updates",
        "spec": "git://github.com/noopkat/browser-serialport.git#api-updates",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:noopkat/browser-serialport.git#api-updates",
          "sshUrl": "git+ssh://git@github.com/noopkat/browser-serialport.git#api-updates",
          "httpsUrl": "git+https://github.com/noopkat/browser-serialport.git#api-updates",
          "gitUrl": "git://github.com/noopkat/browser-serialport.git#api-updates",
          "shortcut": "github:noopkat/browser-serialport#api-updates",
          "directUrl": "https://raw.githubusercontent.com/noopkat/browser-serialport/api-updates/package.json"
        }
      },
      "C:\\Users\\Diego\\arduinotests\\node_modules\\avrgirl-arduino"
    ]
  ],
  "_from": "git://github.com/noopkat/browser-serialport.git#api-updates",
  "_id": "browser-serialport@2.0.3",
  "_inCache": true,
  "_location": "/avrgirl-arduino/browser-serialport",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browser-serialport@git://github.com/noopkat/browser-serialport.git#api-updates",
    "scope": null,
    "escapedName": "browser-serialport",
    "name": "browser-serialport",
    "rawSpec": "git://github.com/noopkat/browser-serialport.git#api-updates",
    "spec": "git://github.com/noopkat/browser-serialport.git#api-updates",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:noopkat/browser-serialport.git#api-updates",
      "sshUrl": "git+ssh://git@github.com/noopkat/browser-serialport.git#api-updates",
      "httpsUrl": "git+https://github.com/noopkat/browser-serialport.git#api-updates",
      "gitUrl": "git://github.com/noopkat/browser-serialport.git#api-updates",
      "shortcut": "github:noopkat/browser-serialport#api-updates",
      "directUrl": "https://raw.githubusercontent.com/noopkat/browser-serialport/api-updates/package.json"
    }
  },
  "_requiredBy": [
    "/avrgirl-arduino"
  ],
  "_resolved": "git://github.com/noopkat/browser-serialport.git#a1cecbee1276bfe78b0491f8d13544c70859ff36",
  "_shasum": "875a7fa647f481afa28d6ddfe5ca951cfb7e02b7",
  "_shrinkwrap": null,
  "_spec": "browser-serialport@git://github.com/noopkat/browser-serialport.git#api-updates",
  "_where": "C:\\Users\\Diego\\arduinotests\\node_modules\\avrgirl-arduino",
  "author": {
    "name": "Glen Arrowsmith @garrows"
  },
  "browser": "./index.js",
  "bugs": {
    "url": "https://github.com/garrows/browser-serialport/issues"
  },
  "dependencies": {},
  "description": "Robots in the browser. Just like node-serialport but for browser/chrome apps.",
  "devDependencies": {
    "chai": "^1.10.0",
    "jshint": "^2.5.11",
    "lodash": "^3.6.0",
    "mocha": "^2.1.0",
    "sinon": "^1.12.2",
    "sinon-chai": "^2.6.0"
  },
  "gitHead": "a1cecbee1276bfe78b0491f8d13544c70859ff36",
  "homepage": "https://github.com/garrows/browser-serialport#readme",
  "keywords": [
    "serial",
    "firmata",
    "nodebots",
    "chromebots",
    "browserbots",
    "robot",
    "robots"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "browser-serialport",
  "optionalDependencies": {},
  "readme": "# browser-serialport\r\n\r\nRobots in the browser. Just like [node-serialport](https://npmjs.org/package/serialport) but for browser apps.\r\n\r\n\r\n## Why not Node.js?\r\n\r\n[Nodebots](http://nodebots.io/) are awesome but HTML5 apps have access to a lot of APIs that make sense for robotics like the [GamepadAPI](http://www.html5rocks.com/en/tutorials/doodles/gamepad/), [WebRTC Video and Data](http://www.webrtc.org/), [Web Speech API](http://www.google.com/intl/en/chrome/demos/speech.html), etc. Also you get a nice GUI and its easier to run. I have also made a fork of [Johnny-Five](https://github.com/garrows/johnny-five) to work with [Browserify](http://browserify.org/) as well by modifying it's dependancy [Firmata](https://github.com/garrows/firmata) to use browser-serialport.\r\n\r\n## Restrictions\r\n\r\nYou will not be able to add this to your normal website.\r\n\r\nThis library only works in a [Chrome Packaged App](http://developer.chrome.com/apps/about_apps.html) as this is the only way to get access to the [serial ports API](http://developer.chrome.com/apps/serial.html) in the browser. Incidentally, since [NW.js](http://nwjs.io/) (a.k.a. node-webkit) now fully supports the Chrome Packaged App platform, this means you can also use this library in NW.js v0.13+.\r\n\r\nIf you want help making your first Chrome App, read the [\"Create Your First App\"](http://developer.chrome.com/apps/first_app.html) tutorial.\r\n\r\nThere is currently no Firefox extension support but that might come soon if possible.\r\n\r\n\r\nKnown incompatibilities with node-serialport\r\n-------------------------------------------\r\n* Parsers not implemented\r\n* Inconsistent error messages\r\n* Chrome has a slightly different options set:\r\n    * __dataBits__: 7, 8\r\n    * __stopBits__: 1, 2\r\n    * __parity__: 'none', 'even', 'mark', 'odd', 'space'\r\n    * __flowControl__: 'RTSCTS'\r\n\r\n\r\n## Installation\r\n\r\n```\r\nnpm install browser-serialport\r\n```\r\n\r\nTo Use\r\n------\r\n\r\nOpening a serial port:\r\n\r\n```js\r\nvar SerialPort = require(\"browser-serialport\");\r\nvar serialPort = new SerialPort(\"/dev/tty-usbserial1\", {\r\n  baudrate: 57600\r\n});\r\n```\r\n\r\nWhen opening a serial port, you can specify (in this order).\r\n\r\n1. Path to Serial Port - required.\r\n1. Options - optional and described below.\r\n\r\nThe options object allows you to pass named options to the serial port during initialization. The valid attributes for the options object are the following:\r\n\r\n* baudrate: Baud Rate, defaults to 9600. Should be one of: 115200, 57600, 38400, 19200, 9600, 4800, 2400, 1800, 1200, 600, 300, 200, 150, 134, 110, 75, or 50. Custom rates as allowed by hardware is supported.\r\n* databits: Data Bits, defaults to 8. Must be one of: 8, 7, ~~6~~, or ~~5~~.\r\n* stopbits: Stop Bits, defaults to 1. Must be one of: 1 or 2.\r\n* parity: Parity, defaults to 'none'. Must be one of: 'none', 'even', 'mark', 'odd', 'space'\r\n* buffersize: Size of read buffer, defaults to 255. Must be an integer value.\r\n* parser: The parser engine to use with read data, defaults to rawPacket strategy which just emits the raw buffer as a \"data\" event. Can be any function that accepts EventEmitter as first parameter and the raw buffer as the second parameter.\r\n\r\n**Note, we have added support for either all lowercase OR camelcase of the options (thanks @jagautier), use whichever style you prefer.**\r\n\r\nopen event\r\n----------\r\n\r\nYou MUST wait for the open event to be emitted before reading/writing to the serial port. The open happens asynchronously so installing 'data' listeners and writing\r\nbefore the open event might result in... nothing at all.\r\n\r\nAssuming you are connected to a serial console, you would for example:\r\n\r\n```js\r\nserialPort.on(\"open\", function () {\r\n  console.log('open');\r\n  serialPort.on('data', function(data) {\r\n    console.log('data received: ' + data);\r\n  });\r\n  serialPort.write(\"ls\\n\", function(err, results) {\r\n    console.log('err ' + err);\r\n    console.log('results ' + results);\r\n  });\r\n});\r\n```\r\n\r\nYou can also call the open function, in this case instantiate the serialport with an additional `autoOpen` property set to `false`.\r\n\r\n```js\r\nvar SerialPort = require(\"browser-serialport\").SerialPort\r\nvar serialPort = new SerialPort(\"/dev/tty-usbserial1\", {\r\n  baudrate: 57600,\r\n  autoOpen: false\r\n});\r\n\r\nserialPort.open(function (error) {\r\n  if ( error ) {\r\n    console.log('failed to open: '+error);\r\n  } else {\r\n    console.log('open');\r\n    serialPort.on('data', function(data) {\r\n      console.log('data received: ' + data);\r\n    });\r\n    serialPort.write(\"ls\\n\", function(err, results) {\r\n      console.log('err ' + err);\r\n      console.log('results ' + results);\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nList Ports\r\n----------\r\n\r\nYou can also list the ports along with some metadata as well.\r\n\r\n```js\r\nvar serialPort = require(\"browser-serialport\");\r\nserialPort.list(function (err, ports) {\r\n  ports.forEach(function(port) {\r\n    console.log(port.comName);\r\n    console.log(port.pnpId);\r\n    console.log(port.manufacturer);\r\n  });\r\n});\r\n```\r\n\r\nParsers\r\n-------\r\n\r\nBrowser-serialport doesn't as of 2.0.0 support parsers.\r\n\r\n\r\nYou can get updates of new data from the Serial Port as follows:\r\n\r\n```js\r\nserialPort.on(\"data\", function (data) {\r\n  sys.puts(\"here: \"+data);\r\n});\r\n```\r\n\r\nYou can write to the serial port by sending a string or buffer to the write method as follows:\r\n\r\n```js\r\nserialPort.write(\"OMG IT WORKS\\r\");\r\n```\r\n\r\nEnjoy and do cool things with this code.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/garrows/browser-serialport.git"
  },
  "scripts": {
    "test": "jshint index.js && mocha"
  },
  "version": "2.0.3"
}
